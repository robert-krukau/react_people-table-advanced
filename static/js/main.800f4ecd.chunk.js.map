{"version":3,"sources":["components/Header/Header.tsx","images/404.png","components/NotFoundPage/NotFoundPage.tsx","components/HomePage/HomePage.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","api/getPeople.ts","App.tsx","index.tsx"],"names":["Header","className","to","isActive","NotFoundPage","src","pnf","alt","HomePage","sortBoth","sortAsc","sortDesc","PeopleTable","people","onChange","selectedId","sortOrder","location","useLocation","searchParams","search","active","pathname","searchFilter","person","finded","find","human","name","slug","id","onClick","map","classNames","includes","sex","born","died","motherName","fatherName","PeoplePage","useState","setPeople","setSelectedId","navigate","useNavigate","URLSearchParams","appliedQuery","get","query","setQuery","sortBy","applyQuery","useCallback","debounce","newQuery","set","delete","toString","visiblePeople","lowerQuery","toLowerCase","filter","sort","a","b","localeCompare","useEffect","fetchedPeople","fetch","then","response","ok","Error","status","statusText","json","result","value","type","placeholder","event","target","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.800f4ecd.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Header: React.FC = () => {\n  return (\n    <div className=\"navbar\">\n      <nav className=\"navbar-brand\">\n        <NavLink\n          to=\"/\"\n          className={\n            ({ isActive }) => (isActive ? 'navbar-item is-tab is-active' : 'navbar-item is-tab')\n          }\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          to=\"/people\"\n          className={\n            ({ isActive }) => (isActive ? 'navbar-item is-tab is-active' : 'navbar-item is-tab')\n          }\n        >\n          People\n        </NavLink>\n      </nav>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/404.c78d6dd6.png\";","import React from 'react';\nimport pnf from '../../images/404.png';\nimport './NotFoundPage.scss';\n\nexport const NotFoundPage: React.FC = () => (\n  <div className=\"errorPage\">\n    <div className=\"errorPage__content\">\n      <img\n        className=\"errorPage__image\"\n        src={pnf}\n        alt=\"404 Page not found\"\n      />\n      <p>404 Page Not Found</p>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1>Home Page</h1>\n);\n","/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst sortBoth = '../../images/sort_both.png';\nconst sortAsc = '../../images/sort_asc.png';\nconst sortDesc = '../../images/sort_desc.png';\n\ntype Props = {\n  people: Person[],\n  onChange: (event: never) => void,\n  selectedId: string;\n  sortOrder: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  onChange,\n  selectedId,\n  sortOrder,\n}) => {\n  const location = useLocation();\n\n  const searchParams = location.search;\n  const active = location.pathname;\n\n  const searchFilter = (person: string) => {\n    const finded = people.find(human => human.name === person);\n\n    return finded?.slug;\n  };\n\n  return (\n    <table className=\"table is-striped is-hoverable is-fullwidth\">\n      <thead>\n        <tr>\n          <th\n            id=\"name\"\n            className={selectedId === 'name' ? 'has-background-grey-light' : ''}\n            onClick={onChange}\n          >\n            <img\n              src={\n                (sortOrder === 'asc' && selectedId === 'name')\n                  ? sortAsc\n                  : (sortOrder === 'desc' && selectedId === 'name')\n                    ? sortDesc\n                    : sortBoth\n              }\n              alt=\"sort\"\n            />\n            Name\n          </th>\n          <th\n            id=\"sex\"\n            className={selectedId === 'sex' ? 'has-background-grey-light' : ''}\n            onClick={onChange}\n          >\n            <img\n              src={\n                (sortOrder === 'asc' && selectedId === 'sex')\n                  ? sortAsc\n                  : (sortOrder === 'desc' && selectedId === 'sex')\n                    ? sortDesc\n                    : sortBoth\n              }\n              alt=\"sort\"\n            />\n            Sex\n          </th>\n          <th\n            id=\"born\"\n            className={selectedId === 'born' ? 'has-background-grey-light' : ''}\n            onClick={onChange}\n          >\n            <img\n              src={\n                (sortOrder === 'asc' && selectedId === 'born')\n                  ? sortAsc\n                  : (sortOrder === 'desc' && selectedId === 'born')\n                    ? sortDesc\n                    : sortBoth\n              }\n              alt=\"sort\"\n            />\n            Born\n          </th>\n          <th\n            id=\"died\"\n            className={selectedId === 'died' ? 'has-background-grey-light' : ''}\n            onClick={onChange}\n          >\n            <img\n              src={\n                (sortOrder === 'asc' && selectedId === 'died')\n                  ? sortAsc\n                  : (sortOrder === 'desc' && selectedId === 'died')\n                    ? sortDesc\n                    : sortBoth\n              }\n              alt=\"sort\"\n            />\n            Died\n          </th>\n          <th>\n            Mother\n          </th>\n          <th>\n            Father\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.name}\n            className={classNames({ 'is-selected': active.includes(person.slug) })}\n          >\n            <td>\n              <Link\n                to={{ pathname: `${person.slug}`, search: searchParams }}\n              >\n                {person.name}\n              </Link>\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {searchFilter(person.motherName) ? (\n                <Link\n                  className=\"has-text-danger\"\n                  to={{ pathname: `${searchFilter(person.motherName)}`, search: searchParams }}\n                >\n                  {person.motherName}\n                </Link>\n              )\n                : <p>{person.motherName || 'Unknown'}</p>}\n            </td>\n            <td>\n              {searchFilter(person.fatherName) ? (\n                <Link\n                  className=\"has-text-link\"\n                  to={{ pathname: `${searchFilter(person.fatherName)}`, search: searchParams }}\n                >\n                  {person.fatherName}\n                </Link>\n              )\n                : <p>{person.fatherName || 'Unknown'}</p>}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport { getPeople } from '../../api/getPeople';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [selectedId, setSelectedId] = useState('');\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const searchParams = new URLSearchParams(location.search);\n\n  const appliedQuery = searchParams.get('query') || '';\n  const [query, setQuery] = useState(appliedQuery);\n  const sortBy = searchParams.get('sortBy') || '';\n  const sortOrder = searchParams.get('sortOrder') || '';\n\n  const applyQuery = useCallback(\n    debounce((newQuery) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      navigate({ search: searchParams.toString() });\n    }, 500),\n    [],\n  );\n\n  // #region visiblePeople\n  let visiblePeople = people;\n\n  if (appliedQuery) {\n    const lowerQuery = appliedQuery.toLowerCase();\n\n    visiblePeople = visiblePeople.filter(person => (\n      person.name.toLowerCase().includes(lowerQuery))\n        || person.motherName?.toLowerCase().includes(lowerQuery)\n        || person.fatherName?.toLowerCase().includes(lowerQuery));\n  }\n  // #endregion\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const handleSortChange = (event: { target: { id: string; }; }) => {\n    const value = event.target.id;\n\n    setSelectedId(value);\n\n    if (value) {\n      searchParams.set('sortBy', value);\n    } else {\n      searchParams.delete('sortBy');\n    }\n\n    if (!sortOrder) {\n      searchParams.set('sortOrder', 'asc');\n    } else if (sortOrder && sortOrder === 'asc') {\n      searchParams.set('sortOrder', 'desc');\n    } else {\n      searchParams.set('sortOrder', 'asc');\n    }\n\n    navigate({ search: searchParams.toString() });\n  };\n\n  if (sortBy) {\n    visiblePeople.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return sortOrder === 'asc'\n            ? a.name.localeCompare(b.name)\n            : b.name.localeCompare(a.name);\n        case 'sex':\n          return sortOrder === 'asc'\n            ? a.sex.localeCompare(b.sex)\n            : b.sex.localeCompare(a.sex);\n        case 'born':\n          return sortOrder === 'asc'\n            ? a.born - b.born\n            : b.born - a.born;\n        case 'died':\n          return sortOrder === 'asc'\n            ? a.died - b.died\n            : b.died - a.died;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  useEffect(() => {\n    const fetchedPeople = async () => {\n      const result = await getPeople();\n\n      setPeople(result);\n    };\n\n    fetchedPeople();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h2>People Page</h2>\n      <input\n        value={query}\n        className=\"input\"\n        type=\"text\"\n        placeholder=\"Type text\"\n        onChange={handleQueryChange}\n      />\n      <PeopleTable\n        people={visiblePeople}\n        onChange={handleSortChange}\n        selectedId={selectedId}\n        sortOrder={sortOrder}\n      />\n    </div>\n  );\n};\n","const url = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = () => {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <div>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/home\" element={<HomePage />} />\n          <Route path=\"/people\" element={<PeoplePage />}>\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}